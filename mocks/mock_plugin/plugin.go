// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/plugin.go

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	config "github.com/nori-io/nori-common/v2/config"
	meta "github.com/nori-io/nori-common/v2/meta"
	plugin "github.com/nori-io/nori-common/v2/plugin"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Meta mocks base method
func (m *MockPlugin) Meta() meta.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(meta.Meta)
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockPluginMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockPlugin)(nil).Meta))
}

// Instance mocks base method
func (m *MockPlugin) Instance() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockPluginMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockPlugin)(nil).Instance))
}

// Init mocks base method
func (m *MockPlugin) Init(ctx context.Context, config config.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockPluginMockRecorder) Init(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockPlugin)(nil).Init), ctx, config)
}

// Start mocks base method
func (m *MockPlugin) Start(ctx context.Context, registry plugin.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockPluginMockRecorder) Start(ctx, registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPlugin)(nil).Start), ctx, registry)
}

// Stop mocks base method
func (m *MockPlugin) Stop(ctx context.Context, registry plugin.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockPluginMockRecorder) Stop(ctx, registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPlugin)(nil).Stop), ctx, registry)
}

// MockInstallable is a mock of Installable interface
type MockInstallable struct {
	ctrl     *gomock.Controller
	recorder *MockInstallableMockRecorder
}

// MockInstallableMockRecorder is the mock recorder for MockInstallable
type MockInstallableMockRecorder struct {
	mock *MockInstallable
}

// NewMockInstallable creates a new mock instance
func NewMockInstallable(ctrl *gomock.Controller) *MockInstallable {
	mock := &MockInstallable{ctrl: ctrl}
	mock.recorder = &MockInstallableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallable) EXPECT() *MockInstallableMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInstallable) Install(ctx context.Context, registry plugin.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx, registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallableMockRecorder) Install(ctx, registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstallable)(nil).Install), ctx, registry)
}

// UnInstall mocks base method
func (m *MockInstallable) UnInstall(ctx context.Context, registry plugin.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnInstall", ctx, registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnInstall indicates an expected call of UnInstall
func (mr *MockInstallableMockRecorder) UnInstall(ctx, registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnInstall", reflect.TypeOf((*MockInstallable)(nil).UnInstall), ctx, registry)
}
