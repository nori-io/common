// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nori-io/nori-common/v2/version (interfaces: Version)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	version "github.com/nori-io/nori-common/v2/version"
	reflect "reflect"
)

// MockVersion is a mock of Version interface
type MockVersion struct {
	ctrl     *gomock.Controller
	recorder *MockVersionMockRecorder
}

// MockVersionMockRecorder is the mock recorder for MockVersion
type MockVersionMockRecorder struct {
	mock *MockVersion
}

// NewMockVersion creates a new mock instance
func NewMockVersion(ctrl *gomock.Controller) *MockVersion {
	mock := &MockVersion{ctrl: ctrl}
	mock.recorder = &MockVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVersion) EXPECT() *MockVersionMockRecorder {
	return m.recorder
}

// Compare mocks base method
func (m *MockVersion) Compare(arg0 version.Version) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Compare indicates an expected call of Compare
func (mr *MockVersionMockRecorder) Compare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockVersion)(nil).Compare), arg0)
}

// Equal mocks base method
func (m *MockVersion) Equal(arg0 version.Version) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockVersionMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVersion)(nil).Equal), arg0)
}

// Metadata mocks base method
func (m *MockVersion) Metadata() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(string)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MockVersionMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockVersion)(nil).Metadata))
}

// Original mocks base method
func (m *MockVersion) Original() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Original")
	ret0, _ := ret[0].(string)
	return ret0
}

// Original indicates an expected call of Original
func (mr *MockVersionMockRecorder) Original() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Original", reflect.TypeOf((*MockVersion)(nil).Original))
}

// Prerelease mocks base method
func (m *MockVersion) Prerelease() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prerelease")
	ret0, _ := ret[0].(string)
	return ret0
}

// Prerelease indicates an expected call of Prerelease
func (mr *MockVersionMockRecorder) Prerelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prerelease", reflect.TypeOf((*MockVersion)(nil).Prerelease))
}

// Segments mocks base method
func (m *MockVersion) Segments() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Segments")
	ret0, _ := ret[0].([]int)
	return ret0
}

// Segments indicates an expected call of Segments
func (mr *MockVersionMockRecorder) Segments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segments", reflect.TypeOf((*MockVersion)(nil).Segments))
}

// String mocks base method
func (m *MockVersion) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockVersionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockVersion)(nil).String))
}
