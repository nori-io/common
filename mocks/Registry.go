// Code generated by mockery v1.0.0. DO NOT EDIT.

//
/*
Copyright 2019 The Nori Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mocks

import config "github.com/nori-io/nori-common/config"
import interfaces "github.com/nori-io/nori-common/interfaces"
import logrus "github.com/sirupsen/logrus"
import meta "github.com/nori-io/nori-common/meta"
import mock "github.com/stretchr/testify/mock"

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// Auth provides a mock function with given fields:
func (_m *Registry) Auth() (interfaces.Auth, error) {
	ret := _m.Called()

	var r0 interfaces.Auth
	if rf, ok := ret.Get(0).(func() interfaces.Auth); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorize provides a mock function with given fields:
func (_m *Registry) Authorize() (interfaces.Authorize, error) {
	ret := _m.Called()

	var r0 interfaces.Authorize
	if rf, ok := ret.Get(0).(func() interfaces.Authorize); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Authorize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache provides a mock function with given fields:
func (_m *Registry) Cache() (interfaces.Cache, error) {
	ret := _m.Called()

	var r0 interfaces.Cache
	if rf, ok := ret.Get(0).(func() interfaces.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Cache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Config provides a mock function with given fields:
func (_m *Registry) Config() config.Manager {
	ret := _m.Called()

	var r0 config.Manager
	if rf, ok := ret.Get(0).(func() config.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Manager)
		}
	}

	return r0
}

// HTTPTransport provides a mock function with given fields:
func (_m *Registry) HTTPTransport() (interfaces.HTTPTransport, error) {
	ret := _m.Called()

	var r0 interfaces.HTTPTransport
	if rf, ok := ret.Get(0).(func() interfaces.HTTPTransport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.HTTPTransport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Http provides a mock function with given fields:
func (_m *Registry) Http() (interfaces.Http, error) {
	ret := _m.Called()

	var r0 interfaces.Http
	if rf, ok := ret.Get(0).(func() interfaces.Http); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Http)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields: _a0
func (_m *Registry) Logger(_a0 meta.Meta) *logrus.Logger {
	ret := _m.Called(_a0)

	var r0 *logrus.Logger
	if rf, ok := ret.Get(0).(func(meta.Meta) *logrus.Logger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Logger)
		}
	}

	return r0
}

// Mail provides a mock function with given fields:
func (_m *Registry) Mail() (interfaces.Mail, error) {
	ret := _m.Called()

	var r0 interfaces.Mail
	if rf, ok := ret.Get(0).(func() interfaces.Mail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Mail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSub provides a mock function with given fields:
func (_m *Registry) PubSub() (interfaces.PubSub, error) {
	ret := _m.Called()

	var r0 interfaces.PubSub
	if rf, ok := ret.Get(0).(func() interfaces.PubSub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.PubSub)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resolve provides a mock function with given fields: dep
func (_m *Registry) Resolve(dep meta.Dependency) (interface{}, error) {
	ret := _m.Called(dep)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(meta.Dependency) interface{}); ok {
		r0 = rf(dep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(meta.Dependency) error); ok {
		r1 = rf(dep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Session provides a mock function with given fields:
func (_m *Registry) Session() (interfaces.Session, error) {
	ret := _m.Called()

	var r0 interfaces.Session
	if rf, ok := ret.Get(0).(func() interfaces.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sql provides a mock function with given fields:
func (_m *Registry) Sql() (interfaces.SQL, error) {
	ret := _m.Called()

	var r0 interfaces.SQL
	if rf, ok := ret.Get(0).(func() interfaces.SQL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SQL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Templates provides a mock function with given fields:
func (_m *Registry) Templates() (interfaces.Templates, error) {
	ret := _m.Called()

	var r0 interfaces.Templates
	if rf, ok := ret.Get(0).(func() interfaces.Templates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Templates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
