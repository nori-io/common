// Code generated by mockery v1.0.0. DO NOT EDIT.

//
/*
Copyright 2019 The Nori Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mocks

import config "github.com/nori-io/nori-common/config"
import logger "github.com/nori-io/nori-common/logger"
import meta "github.com/nori-io/nori-common/meta"
import mock "github.com/stretchr/testify/mock"

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *Registry) Config() config.Manager {
	ret := _m.Called()

	var r0 config.Manager
	if rf, ok := ret.Get(0).(func() config.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Manager)
		}
	}

	return r0
}

// Interface provides a mock function with given fields: i
func (_m *Registry) Interface(i meta.Interface) (interface{}, error) {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(meta.Interface) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(meta.Interface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields: _a0
func (_m *Registry) Logger(_a0 meta.Meta) logger.Writer {
	ret := _m.Called(_a0)

	var r0 logger.Writer
	if rf, ok := ret.Get(0).(func(meta.Meta) logger.Writer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Writer)
		}
	}

	return r0
}

// Resolve provides a mock function with given fields: dep
func (_m *Registry) Resolve(dep meta.Dependency) (interface{}, error) {
	ret := _m.Called(dep)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(meta.Dependency) interface{}); ok {
		r0 = rf(dep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(meta.Dependency) error); ok {
		r1 = rf(dep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
