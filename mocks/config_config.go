// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nori-io/common/v2/config (interfaces: Config)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/nori-io/common/v2/config"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *MockConfig) Bool(arg0, arg1 string) config.Bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", arg0, arg1)
	ret0, _ := ret[0].(config.Bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *MockConfigMockRecorder) Bool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockConfig)(nil).Bool), arg0, arg1)
}

// Float mocks base method
func (m *MockConfig) Float(arg0, arg1 string) config.Float {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float", arg0, arg1)
	ret0, _ := ret[0].(config.Float)
	return ret0
}

// Float indicates an expected call of Float
func (mr *MockConfigMockRecorder) Float(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockConfig)(nil).Float), arg0, arg1)
}

// Int mocks base method
func (m *MockConfig) Int(arg0, arg1 string) config.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", arg0, arg1)
	ret0, _ := ret[0].(config.Int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *MockConfigMockRecorder) Int(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockConfig)(nil).Int), arg0, arg1)
}

// Int32 mocks base method
func (m *MockConfig) Int32(arg0, arg1 string) config.Int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int32", arg0, arg1)
	ret0, _ := ret[0].(config.Int32)
	return ret0
}

// Int32 indicates an expected call of Int32
func (mr *MockConfigMockRecorder) Int32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int32", reflect.TypeOf((*MockConfig)(nil).Int32), arg0, arg1)
}

// Int64 mocks base method
func (m *MockConfig) Int64(arg0, arg1 string) config.Int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64", arg0, arg1)
	ret0, _ := ret[0].(config.Int64)
	return ret0
}

// Int64 indicates an expected call of Int64
func (mr *MockConfigMockRecorder) Int64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockConfig)(nil).Int64), arg0, arg1)
}

// Int8 mocks base method
func (m *MockConfig) Int8(arg0, arg1 string) config.Int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int8", arg0, arg1)
	ret0, _ := ret[0].(config.Int8)
	return ret0
}

// Int8 indicates an expected call of Int8
func (mr *MockConfigMockRecorder) Int8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int8", reflect.TypeOf((*MockConfig)(nil).Int8), arg0, arg1)
}

// Slice mocks base method
func (m *MockConfig) Slice(arg0, arg1 string) config.Slice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", arg0, arg1)
	ret0, _ := ret[0].(config.Slice)
	return ret0
}

// Slice indicates an expected call of Slice
func (mr *MockConfigMockRecorder) Slice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockConfig)(nil).Slice), arg0, arg1)
}

// SliceInt mocks base method
func (m *MockConfig) SliceInt(arg0, arg1 string) config.SliceInt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceInt", arg0, arg1)
	ret0, _ := ret[0].(config.SliceInt)
	return ret0
}

// SliceInt indicates an expected call of SliceInt
func (mr *MockConfigMockRecorder) SliceInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceInt", reflect.TypeOf((*MockConfig)(nil).SliceInt), arg0, arg1)
}

// SliceString mocks base method
func (m *MockConfig) SliceString(arg0, arg1 string) config.SliceString {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceString", arg0, arg1)
	ret0, _ := ret[0].(config.SliceString)
	return ret0
}

// SliceString indicates an expected call of SliceString
func (mr *MockConfigMockRecorder) SliceString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceString", reflect.TypeOf((*MockConfig)(nil).SliceString), arg0, arg1)
}

// String mocks base method
func (m *MockConfig) String(arg0, arg1 string) config.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", arg0, arg1)
	ret0, _ := ret[0].(config.String)
	return ret0
}

// String indicates an expected call of String
func (mr *MockConfigMockRecorder) String(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockConfig)(nil).String), arg0, arg1)
}

// StringMap mocks base method
func (m *MockConfig) StringMap(arg0, arg1 string) config.StringMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMap", arg0, arg1)
	ret0, _ := ret[0].(config.StringMap)
	return ret0
}

// StringMap indicates an expected call of StringMap
func (mr *MockConfigMockRecorder) StringMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMap", reflect.TypeOf((*MockConfig)(nil).StringMap), arg0, arg1)
}

// StringMapInt mocks base method
func (m *MockConfig) StringMapInt(arg0, arg1 string) config.StringMapInt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapInt", arg0, arg1)
	ret0, _ := ret[0].(config.StringMapInt)
	return ret0
}

// StringMapInt indicates an expected call of StringMapInt
func (mr *MockConfigMockRecorder) StringMapInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapInt", reflect.TypeOf((*MockConfig)(nil).StringMapInt), arg0, arg1)
}

// StringMapSliceString mocks base method
func (m *MockConfig) StringMapSliceString(arg0, arg1 string) config.StringMapSliceString {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapSliceString", arg0, arg1)
	ret0, _ := ret[0].(config.StringMapSliceString)
	return ret0
}

// StringMapSliceString indicates an expected call of StringMapSliceString
func (mr *MockConfigMockRecorder) StringMapSliceString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapSliceString", reflect.TypeOf((*MockConfig)(nil).StringMapSliceString), arg0, arg1)
}

// StringMapString mocks base method
func (m *MockConfig) StringMapString(arg0, arg1 string) config.StringMapString {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapString", arg0, arg1)
	ret0, _ := ret[0].(config.StringMapString)
	return ret0
}

// StringMapString indicates an expected call of StringMapString
func (mr *MockConfigMockRecorder) StringMapString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapString", reflect.TypeOf((*MockConfig)(nil).StringMapString), arg0, arg1)
}

// UInt mocks base method
func (m *MockConfig) UInt(arg0, arg1 string) config.UInt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt", arg0, arg1)
	ret0, _ := ret[0].(config.UInt)
	return ret0
}

// UInt indicates an expected call of UInt
func (mr *MockConfigMockRecorder) UInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt", reflect.TypeOf((*MockConfig)(nil).UInt), arg0, arg1)
}

// UInt32 mocks base method
func (m *MockConfig) UInt32(arg0, arg1 string) config.UInt32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt32", arg0, arg1)
	ret0, _ := ret[0].(config.UInt32)
	return ret0
}

// UInt32 indicates an expected call of UInt32
func (mr *MockConfigMockRecorder) UInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt32", reflect.TypeOf((*MockConfig)(nil).UInt32), arg0, arg1)
}

// UInt64 mocks base method
func (m *MockConfig) UInt64(arg0, arg1 string) config.UInt64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt64", arg0, arg1)
	ret0, _ := ret[0].(config.UInt64)
	return ret0
}

// UInt64 indicates an expected call of UInt64
func (mr *MockConfigMockRecorder) UInt64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt64", reflect.TypeOf((*MockConfig)(nil).UInt64), arg0, arg1)
}
