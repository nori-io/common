// Code generated by mockery v1.0.0. DO NOT EDIT.

//
/*
Copyright 2019 The Nori Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import template "html/template"

// Templates is an autogenerated mock type for the Templates type
type Templates struct {
	mock.Mock
}

// Delete provides a mock function with given fields: name
func (_m *Templates) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: name, data
func (_m *Templates) Execute(name string, data interface{}) (string, error) {
	ret := _m.Called(name, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(name, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(name, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteWriter provides a mock function with given fields: name, data, w
func (_m *Templates) ExecuteWriter(name string, data interface{}, w io.Writer) error {
	ret := _m.Called(name, data, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, io.Writer) error); ok {
		r0 = rf(name, data, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *Templates) Get(name string) (*template.Template, error) {
	ret := _m.Called(name)

	var r0 *template.Template
	if rf, ok := ret.Get(0).(func(string) *template.Template); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*template.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: name, body
func (_m *Templates) Set(name string, body string) error {
	ret := _m.Called(name, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
