// Code generated by mockery v1.0.0. DO NOT EDIT.

//
/*
Copyright 2019 The Nori Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mocks

import config "github.com/nori-io/nori-common/config"
import mock "github.com/stretchr/testify/mock"

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// Bool provides a mock function with given fields: key, desc
func (_m *Config) Bool(key string, desc string) config.Bool {
	ret := _m.Called(key, desc)

	var r0 config.Bool
	if rf, ok := ret.Get(0).(func(string, string) config.Bool); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Bool)
		}
	}

	return r0
}

// Float provides a mock function with given fields: key, desc
func (_m *Config) Float(key string, desc string) config.Float {
	ret := _m.Called(key, desc)

	var r0 config.Float
	if rf, ok := ret.Get(0).(func(string, string) config.Float); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Float)
		}
	}

	return r0
}

// Int provides a mock function with given fields: key, desc
func (_m *Config) Int(key string, desc string) config.Int {
	ret := _m.Called(key, desc)

	var r0 config.Int
	if rf, ok := ret.Get(0).(func(string, string) config.Int); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Int)
		}
	}

	return r0
}

// Slice provides a mock function with given fields: key, delimiter, desc
func (_m *Config) Slice(key string, delimiter string, desc string) config.Slice {
	ret := _m.Called(key, delimiter, desc)

	var r0 config.Slice
	if rf, ok := ret.Get(0).(func(string, string, string) config.Slice); ok {
		r0 = rf(key, delimiter, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Slice)
		}
	}

	return r0
}

// String provides a mock function with given fields: key, desc
func (_m *Config) String(key string, desc string) config.String {
	ret := _m.Called(key, desc)

	var r0 config.String
	if rf, ok := ret.Get(0).(func(string, string) config.String); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.String)
		}
	}

	return r0
}

// StringMap provides a mock function with given fields: key, desc
func (_m *Config) StringMap(key string, desc string) config.StringMap {
	ret := _m.Called(key, desc)

	var r0 config.StringMap
	if rf, ok := ret.Get(0).(func(string, string) config.StringMap); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.StringMap)
		}
	}

	return r0
}

// UInt provides a mock function with given fields: key, desc
func (_m *Config) UInt(key string, desc string) config.UInt {
	ret := _m.Called(key, desc)

	var r0 config.UInt
	if rf, ok := ret.Get(0).(func(string, string) config.UInt); ok {
		r0 = rf(key, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.UInt)
		}
	}

	return r0
}
