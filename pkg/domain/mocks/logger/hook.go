// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nori-io/common/v3/pkg/domain/logger (interfaces: Hook)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	logger "github.com/nori-io/common/v3/pkg/domain/logger"
	reflect "reflect"
)

// MockHook is a mock of Hook interface
type MockHook struct {
	ctrl     *gomock.Controller
	recorder *MockHookMockRecorder
}

// MockHookMockRecorder is the mock recorder for MockHook
type MockHookMockRecorder struct {
	mock *MockHook
}

// NewMockHook creates a new mock instance
func NewMockHook(ctrl *gomock.Controller) *MockHook {
	mock := &MockHook{ctrl: ctrl}
	mock.recorder = &MockHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHook) EXPECT() *MockHookMockRecorder {
	return m.recorder
}

// Fire mocks base method
func (m *MockHook) Fire(arg0 logger.Entry, arg1 ...logger.Field) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fire", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fire indicates an expected call of Fire
func (mr *MockHookMockRecorder) Fire(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fire", reflect.TypeOf((*MockHook)(nil).Fire), varargs...)
}

// Levels mocks base method
func (m *MockHook) Levels() []logger.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Levels")
	ret0, _ := ret[0].([]logger.Level)
	return ret0
}

// Levels indicates an expected call of Levels
func (mr *MockHookMockRecorder) Levels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Levels", reflect.TypeOf((*MockHook)(nil).Levels))
}
